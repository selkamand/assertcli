[{"path":"https://selkamand.github.io/assertions/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 assertions authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://selkamand.github.io/assertions/articles/create_custom_assertions.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Create Custom Assertions","text":"custom assertion want use repeatedly code? create assertion functions assert_create() function!. Lets start recreating assert_character() assertion using assert_create(): create custom assertion function, need supply two arguments assert_create(): func: function take object assert returns TRUE FALSE depending whether assertion pass fail. default_error_msg: character string providing error message case assertion fails. string can include special termss : {arg_name} refer name variable checked {arg_value} refer value variable. {code_to_evaluate} evaluate code within error message. Customise ‘code_to_evaluate’. e.g {class(arg_name)} {.strong bold_text} perform inline formatting. Customise ‘bold_text’","code":"# Create a function that asserts input is a character value assert_character_2 <- assert_create(   func = is.character(x), # Returns TRUE/FALSE for assertion PASS/FAIL   default_error_msg = \"'{arg_name}' must be a character value, not a {class(arg_value)}\"   )  # Assertion passes if input is a character value assert_character_2(\"abc\")  # But throws the expected error if input is not a character value assert_character_2(123)"},{"path":"https://selkamand.github.io/assertions/articles/create_custom_assertions.html","id":"advanced-assertions","dir":"Articles","previous_headings":"","what":"Advanced Assertions","title":"Create Custom Assertions","text":"Sometimes need one error message per assertion. situation, often lots individual assertions still usually best choice, ’s always case. also option using {assert_create_advanced()}. function works similar way assert_create{} takes one argument: func func expect? (like assert_create) Function return TRUE assertion passes (unlike assert_create) Function return character string containing error message text assertion fails. lets implement different error messages different ways argument fails assertion.","code":""},{"path":"https://selkamand.github.io/assertions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam El-Kamand. Author, maintainer, copyright holder.","code":""},{"path":"https://selkamand.github.io/assertions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"El-Kamand S (2023). assertions: Enhance Feedback Provided Assertions Beautiful Customizable Error Messages. R package version 0.0.0.9000, https://selkamand.github.io/assertions/.","code":"@Manual{,   title = {assertions: Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages},   author = {Sam El-Kamand},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://selkamand.github.io/assertions/}, }"},{"path":"https://selkamand.github.io/assertions/index.html","id":"assertions-","dir":"","previous_headings":"","what":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"Simple assertions sensible defaults customisable error messages.","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"goals assertions provide Convenient assertion calls (e.g. assert_number()) general assert function asserts possible condition/s throws informative error messages Extremely user friendly error message defaults. Easily customisable error messages, inline code evaluation & styling powered cli package Simple creation custom assertion functions user-specified defaults","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"can install development version assertions like ","code":"# install.packages('remotes') remotes::install_github('selkamand/assertions')"},{"path":"https://selkamand.github.io/assertions/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"assertions start assert, means just type levarage autocomplete suggestions look available options","code":"# Load library library(assertions)  # Use premade assertions assert_character(c('a', 'b', 'c')) assert_number(2) assert_flag(TRUE)  # Assert anything  assert(1000 % 2 == 0)  # Assert multiple conditions at once (all must be true) assert(1000 % 2 == 0, 6/2 == 3)"},{"path":"https://selkamand.github.io/assertions/index.html","id":"customizing-error-messages","dir":"","previous_headings":"","what":"Customizing Error Messages","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"advanced customisation, see cli documentation","code":"# Customise any error messages using the `msg` argument assert_number(\"A\", msg = \"Please supply a number!\")  # Evaluate code in your error message using '{}' operators foo = \"A\" assert_number(foo, msg = \"'{foo}' is not a number :(. Try again\")  # Emphasise cetain words in error using {.strong text_to_emphasise} assert_number(\"A\", msg = \"{.strong Try again}\")"},{"path":"https://selkamand.github.io/assertions/index.html","id":"create-your-own-assertion-functions","dir":"","previous_headings":"","what":"Create your own assertion functions","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"custom assertion want use repeatedly? Creating assertion functions extremely eas Just use assert_create(), just need supply: function returns TRUE/FALSE assertion PASS/FAIL default error message ```{r. eval = FALSE}","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"create-a-function-that-asserts-input-is-lowercase","dir":"","previous_headings":"","what":"Create a function that asserts input is lowercase","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"assert_lowercase <- assert_create( func = function(x) {x == tolower(x)}, default_error_msg = “‘{arg_name}’ must entirely lowercase” )","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"assertion-passes-if-input-is-lowercase","dir":"","previous_headings":"","what":"Assertion passes if input is lowercase","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"assert_lowercase(“lower case”)","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"but-throws-the-expected-error-if-uppercase-characters-are-present","dir":"","previous_headings":"","what":"But throws the expected error if uppercase characters are present","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"assert_lowercase(“lower case”) ``` See ?assert_create() details","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"contributing-to-this-package","dir":"","previous_headings":"","what":"Contributing to this package","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"Two options","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"request-an-assertion","dir":"","previous_headings":"Contributing to this package","what":"Request an assertion","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"Open github issue request away. ’m happy implement tonne assertions, just let know want","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"creating-assertions-yourself","dir":"","previous_headings":"Contributing to this package","what":"Creating assertions yourself","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"Create custom assert_something function call assert_create() assert_create_advanced() Create github issue assertion creation code + helper function pass func argument (e.g. is_something())","code":""},{"path":"https://selkamand.github.io/assertions/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Enhance the Feedback Provided by Your Assertions with Beautiful and Customizable Error Messages","text":"Great alternative packages writing assertions include: assertthat checkmate assertive ensurer package features syntax, users can choose one best fits needs preferences. find best fit, can helpful try options consider speed, default error messages, flexibility, included assertion capabilities.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that conditions are met — assert","title":"Assert that conditions are met — assert","text":"Assert conditions met","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that conditions are met — assert","text":"","code":"assert(..., msg = NULL, call = rlang::caller_env())"},{"path":"https://selkamand.github.io/assertions/reference/assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that conditions are met — assert","text":"... list conditions check msg character string containing error message display conditions met. string can include placeholder failed_expressions insert list failed expressions. string can also include ?s ?/insert correct pluralization list failed expressions. call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that conditions are met — assert","text":"invisible(TRUE) conditions met, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that conditions are met — assert","text":"","code":"if (FALSE) { assert(1 == 1) # Passes assert(2 == 2, 3 == 3) # Passes assert(2 == 1, 3 == 3) # Throws default error assert(2 == 1, 3 == 3, msg = \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a character vector — assert_character","title":"Assert that the input object is a character vector — assert_character","text":"Assert input object character vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a character vector — assert_character","text":"","code":"assert_character(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a character vector — assert_character","text":"x object msg character string containing error message display x character vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a character vector — assert_character","text":"invisible(TRUE) x character vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a character vector — assert_character","text":"","code":"if (FALSE) { assert_character(\"a\") # Passes assert_character(c(\"a\", \"b\", \"c\")) # Passes assert_character(1:3) # Throws default error assert_character(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_character_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a character vector — assert_character_vector","title":"Assert that the input object is a character vector — assert_character_vector","text":"Assert input object character vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a character vector — assert_character_vector","text":"","code":"assert_character_vector(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_character_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a character vector — assert_character_vector","text":"x object msg character string containing error message display x character vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a character vector — assert_character_vector","text":"invisible(TRUE) x character vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_character_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a character vector — assert_character_vector","text":"","code":"if (FALSE) { assert_character_vector(c(\"a\", \"b\", \"c\")) # Passes assert_character_vector(c(\"a\", 1, \"b\")) # Throws default error assert_character_vector(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an assertion function — assert_create","title":"Create an assertion function — assert_create","text":"function creates assertion function can used check validity input. assertions provided package created using either assert_create() assert_create_advanced()","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an assertion function — assert_create","text":"","code":"assert_create(func, default_error_msg)"},{"path":"https://selkamand.github.io/assertions/reference/assert_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an assertion function — assert_create","text":"func function defining assertion criteria. function return logical value (TRUE assertion passed FALSE fails) default_error_msg character string providing error message case assertion fails. Can include following special terms {arg_name} refer name variable supplied assertion. {arg_value} refer value variable supplied assertion {code_to_evaluate} evaluate code within error message. Replace code_to_evaluate code {.strong bold_text} perform inline formatting. Replace bold_text text. See cli documentation details","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an assertion function — assert_create","text":"assertion function.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an assertion function — assert_create","text":"","code":"if (FALSE) { # Create an assertion function that checks that a character string is all # lower case assert_character <- assert_create(   is.character,   \"{arg_name} must be a character vector, not a {class(arg_value)}\" )  # Use the assertion function is_lower(\"hello\") # Returns invisible TRUE is_lower(\"Hello\") # Aborts the function with the error message }"},{"path":"https://selkamand.github.io/assertions/reference/assert_create_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom assertion function — assert_create_advanced","title":"Create a custom assertion function — assert_create_advanced","text":"Creates custom assertion function can used check supplied value meets certain criteria. input function required return TRUE assertion pass string error message fail.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_create_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom assertion function — assert_create_advanced","text":"","code":"assert_create_advanced(func)"},{"path":"https://selkamand.github.io/assertions/reference/assert_create_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom assertion function — assert_create_advanced","text":"func function defining assertion criteria. function return TRUE assertion pass, character string representing error message fail. E Error message strings can contain special keywords / formatting described assert_create()","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_create_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a custom assertion function — assert_create_advanced","text":"Returns custom assertion function can used check supplied value meets defined criteria.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a data frame — assert_dataframe","title":"Assert that the input object is a data frame — assert_dataframe","text":"Assert input object data frame","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a data frame — assert_dataframe","text":"","code":"assert_dataframe(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a data frame — assert_dataframe","text":"x object msg character string containing error message display x data frame call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a data frame — assert_dataframe","text":"invisible(TRUE) x data frame, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a data frame — assert_dataframe","text":"","code":"if (FALSE) { assert_dataframe(mtcars) # Passes assert_dataframe(data.frame()) # Passes  assert_dataframe(1:10) # Throws default error assert_dataframe(matrix(1:6, 2, 3)) # Throws default error assert_dataframe(c(1, 2, 3)) # Throws default error: \"Error assert_dataframe(list(a = 1, b = 2)) # Throws default error assert_dataframe(factor(c(1, 2, 3))) # Throws default error  assert_dataframe(1:10, msg = \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a factor — assert_factor","title":"Assert that the input object is a factor — assert_factor","text":"Assert input object factor","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a factor — assert_factor","text":"","code":"assert_factor(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a factor — assert_factor","text":"x object msg character string containing error message display x factor call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a factor — assert_factor","text":"invisible(TRUE) x factor, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a factor — assert_factor","text":"","code":"if (FALSE) { assert_factor(factor(c(\"a\", \"b\", \"c\"))) # Passes assert_factor(c(\"a\", \"b\", \"c\")) # Throws default error assert_factor(factor(c(\"a\", \"b\", \"c\")), \"Custom error message\") # Passes assert_factor(1:3, \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a scalar logical — assert_flag","title":"Assert that the input object is a scalar logical — assert_flag","text":"Assert input object flag (logical length 1: TRUE FALSE)","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a scalar logical — assert_flag","text":"","code":"assert_flag(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a scalar logical — assert_flag","text":"x object msg character string containing error message display x scalar logical call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a scalar logical — assert_flag","text":"invisible(TRUE) x scalar logical, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a scalar logical — assert_flag","text":"","code":"if (FALSE) { assert_flag(TRUE) # Passes assert_flag(FALSE) # Passes assert_flag(c(TRUE, FALSE)) # Throws default error assert_flag(1, \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is a function — assert_function","title":"Assert that x is a function — assert_function","text":"Assert x function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is a function — assert_function","text":"","code":"assert_function(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is a function — assert_function","text":"x object msg character string containing error message display x function call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that x is a function — assert_function","text":"invisible(TRUE) x function, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that x is a function — assert_function","text":"","code":"if (FALSE) { # Assert that a variable is a function x <- function(a, b) { a + b } assert_function(x)  # does nothing  # Assert that a variable is not a function x <- \"not a function\" assert_function(x)  # stops execution and prints an error message }"},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is an integer — assert_int","title":"Assert that the input object is an integer — assert_int","text":"Assert input object integer","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is an integer — assert_int","text":"","code":"assert_int(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is an integer — assert_int","text":"x object msg character string containing error message display x integer call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is an integer — assert_int","text":"invisible(TRUE) x integer, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assert that the input object is an integer — assert_int","text":"R, integers whole numbers. integers doubles (numbers decimals) considered numeric. function checks x specifically belong integer class.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is an integer — assert_int","text":"","code":"if (FALSE) { assert_int(1) # Passes assert_int(1:10) # Passes assert_int(c(1, 2, 3)) # Passes assert_int(\"a\") # Throws default error assert_int(1.5, msg = \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is logical — assert_logical","title":"Assert that the input object is logical — assert_logical","text":"Assert input object logical","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is logical — assert_logical","text":"","code":"assert_logical(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is logical — assert_logical","text":"x object msg character string containing error message display x logical call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is logical — assert_logical","text":"invisible(TRUE) x logical, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is logical — assert_logical","text":"","code":"if (FALSE) { assert_logical(TRUE) # Passes assert_logical(c(TRUE, FALSE, TRUE)) # Passes assert_logical(c(\"a\", \"b\")) # Throws default error assert_logical(1:3, \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_logical_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is an atomic logical vector — assert_logical_vector","title":"Assert that the input object is an atomic logical vector — assert_logical_vector","text":"Assert input object atomic logical vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is an atomic logical vector — assert_logical_vector","text":"","code":"assert_logical_vector(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_logical_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is an atomic logical vector — assert_logical_vector","text":"x object msg character string containing error message display x atomic logical vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Arguments passed is_logical_vector include_lists logical value indicating whether include lists check. Defaults FALSE.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is an atomic logical vector — assert_logical_vector","text":"invisible(TRUE) x atomic logical vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_logical_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is an atomic logical vector — assert_logical_vector","text":"","code":"if (FALSE) { assert_logical_vector(c(TRUE, TRUE, TRUE)) # Passes assert_logical_vector(\"a\") # Throws default error assert_logical_vector(c(1, 0, 1), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a matrix — assert_matrix","title":"Assert that the input object is a matrix — assert_matrix","text":"Assert input object matrix","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a matrix — assert_matrix","text":"","code":"assert_matrix(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a matrix — assert_matrix","text":"x object msg character string containing error message display x matrix call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a matrix — assert_matrix","text":"invisible(TRUE) x matrix, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a matrix — assert_matrix","text":"","code":"if (FALSE) { assert_matrix(matrix(1:9, 3)) # Passes assert_matrix(matrix(1:9, 3, 3)) # Passes assert_matrix(c(1, 2, 3)) # Throws default error assert_matrix(1:10, \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_names_include.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object includes a specified name — assert_names_include","title":"Assert that the input object includes a specified name — assert_names_include","text":"Assert input object includes specified name","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_names_include.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object includes a specified name — assert_names_include","text":"","code":"assert_names_include(x, names, msg = NULL, call = rlang::caller_env())"},{"path":"https://selkamand.github.io/assertions/reference/assert_names_include.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object includes a specified name — assert_names_include","text":"x object check presence name names character vector names check x msg character string containing error message display names present x call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_names_include.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object includes a specified name — assert_names_include","text":"invisible(TRUE) names present x, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_names_include.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object includes a specified name — assert_names_include","text":"","code":"if (FALSE) { x <- list(a = 1, b = 2, c = 3)  assert_includes_name(x, \"a\") # Passes assert_includes_name(x, c(\"a\", \"b\")) # Passes assert_includes_name(x, c(\"a\", \"b\", \"d\")) # Throws default error message  assert_includes_name(x, c(\"a\", \"b\", \"d\"), \"Custom error message\") # Throws custom error message }"},{"path":"https://selkamand.github.io/assertions/reference/assert_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a number — assert_number","title":"Assert that the input object is a number — assert_number","text":"number length 1 numeric vector. Numbers can either integers doubles.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a number — assert_number","text":"","code":"assert_number(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a number — assert_number","text":"x object msg character string containing error message display x number call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a number — assert_number","text":"invisible(TRUE) x number, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a number — assert_number","text":"","code":"if (FALSE) { assert_number(2) # Passes assert_number(c(2, 3)) # Throws default error assert_number(\"a\") # Throws default error assert_number(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is numeric — assert_numeric","title":"Assert that the input object is numeric — assert_numeric","text":"Assert input object numeric","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is numeric — assert_numeric","text":"","code":"assert_numeric(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is numeric — assert_numeric","text":"x object msg character string containing error message display x numeric call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is numeric — assert_numeric","text":"invisible(TRUE) x numeric, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is numeric — assert_numeric","text":"","code":"if (FALSE) { assert_numeric(1:3) # Passes assert_numeric(1.5:5.5) # Passes assert_numeric(c(\"a\", \"b\", \"c\")) # Throws default error assert_numeric(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a numeric vector — assert_numeric_vector","title":"Assert that the input object is a numeric vector — assert_numeric_vector","text":"Assert input object numeric vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a numeric vector — assert_numeric_vector","text":"","code":"assert_numeric_vector(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a numeric vector — assert_numeric_vector","text":"x object msg character string containing error message display x numeric vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Arguments passed is_numeric_vector include_lists logical value indicating whether lists containing numeric elements considered numeric vectors.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_numeric_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a numeric vector — assert_numeric_vector","text":"invisible(TRUE) x numeric vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a character string — assert_string","title":"Assert that the input object is a character string — assert_string","text":"Assert input object character string","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a character string — assert_string","text":"","code":"assert_string(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a character string — assert_string","text":"x object msg character string containing error message display x character vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Used pass arguments assertion function","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a character string — assert_string","text":"invisible(TRUE) x character vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a character string — assert_string","text":"","code":"if (FALSE) { assert_string(\"a\") # Passes assert_string(c(\"a\", \"b\", \"c\")) # Throws default error assert_string(1:3) # Throws default error assert_string(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error }"},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the input object is a vector — assert_vector","title":"Assert that the input object is a vector — assert_vector","text":"Assert input object vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the input object is a vector — assert_vector","text":"","code":"assert_vector(x, msg = NULL, call = rlang::caller_env(), ...)"},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the input object is a vector — assert_vector","text":"x object msg character string containing error message display x vector call relevant pooling assert_ions multi-assertion helper functions. See cli_abort details. ... Arguments passed is_vector include_lists logical indicating whether lists considered vectors. Default FALSE.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that the input object is a vector — assert_vector","text":"invisible(TRUE) x vector, otherwise aborts error message specified msg","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assert that the input object is a vector — assert_vector","text":"default, lists considered vectors (.e. include_lists = FALSE) align end-users expect, spite objects technically vectors.","code":""},{"path":"https://selkamand.github.io/assertions/reference/assert_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that the input object is a vector — assert_vector","text":"","code":"if (FALSE) { assert_vector(c(1, 2, 3)) # Passes assert_vector(matrix(1:6, 2, 3)) # Throws default error message assert_vector(1:3) # Passes  assert_vector(list(1, 2, 3)) # Throws default error message assert_vector(list(1, 2, 3), include_lists = TRUE) # Passes  assert_vector(c(\"a\", 1, \"b\"), \"Custom error message\") # Throws custom error message assert_vector(factor(c(1, 2, 3)), \"Custom error message\") # Throws custom error message }"},{"path":"https://selkamand.github.io/assertions/reference/format_as_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","title":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","text":"format_as_bullets function used preprocessing character vectors adding names. names used denote bullet points character vector passed cli::cli_abort(). allows easy creation bullet point lists error messages. bullet argument allows user specify desired bullet point symbol. default bullet point symbols : *, >, , x, v, , !.","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_as_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","text":"","code":"format_as_bullets(x, bullet = c(\"*\", \">\", \" \", \"x\", \"v\", \"i\", \"!\"))"},{"path":"https://selkamand.github.io/assertions/reference/format_as_bullets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","text":"x list character strings bullet One '', '>', ' ', 'x', 'v', '', '!' (default: '') character use bullet point element x.","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_as_bullets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","text":"character string element x formatted bullet point","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_as_bullets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess character vectors for cli::cli_abort() — format_as_bullets","text":"","code":"if (FALSE) { cli::cli_abort(format_as_bullets(c(\"item 1\", \"item 2\", \"item 3\"))) #> * item 1 #> * item 2 #> * item 3   cli::cli_abort(format_as_bullets(c(\"item 1\", \"item 2\", \"item 3\"), bullet = \">\")) #> > item 1 #> > item 2 #> > item 3 }"},{"path":"https://selkamand.github.io/assertions/reference/format_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess character vectors for cli package functions — format_inline","title":"Preprocess character vectors for cli package functions — format_inline","text":"Preprocess character vectors cli package functions","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess character vectors for cli package functions — format_inline","text":"","code":"format_inline(x, inline_tag = c(\"strong\", \"emph\", \"code\", \"arg\"))"},{"path":"https://selkamand.github.io/assertions/reference/format_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess character vectors for cli package functions — format_inline","text":"x character vector inline_tag character vector inline tag names (e.g. \"strong\", \"emph\", \"code\", \"arg\")","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess character vectors for cli package functions — format_inline","text":"character vector inline tags applied element","code":""},{"path":"https://selkamand.github.io/assertions/reference/format_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess character vectors for cli package functions — format_inline","text":"","code":"if (FALSE) { format_inline(c(\"apple\", \"banana\", \"carrot\"), inline_tag = \"strong\")  format_inline(c(\"apple\", \"banana\", \"carrot\"), inline_tag = \"emph\") }"},{"path":"https://selkamand.github.io/assertions/reference/is_character_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a character vector — is_character_vector","title":"Check if an object is a character vector — is_character_vector","text":"Check object character vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_character_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a character vector — is_character_vector","text":"","code":"is_character_vector(x, include_lists = FALSE)"},{"path":"https://selkamand.github.io/assertions/reference/is_character_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a character vector — is_character_vector","text":"x object check. include_lists logical value indicating whether include lists check. Defaults FALSE.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_character_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a character vector — is_character_vector","text":"logical value indicating whether x character vector.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_flag_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is a flag — is_flag_advanced","title":"Check if x is a flag — is_flag_advanced","text":"function designed use assert_create_advanced. must return TRUE assertion pass string representing error message assertion fail.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_flag_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is a flag — is_flag_advanced","text":"","code":"is_flag_advanced(x)"},{"path":"https://selkamand.github.io/assertions/reference/is_flag_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is a flag — is_flag_advanced","text":"x value checked","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_flag_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if x is a flag — is_flag_advanced","text":"Returns invisible(TRUE) x logical value length 1. Returns string error message x logical value length 1.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_logical_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a logical vector — is_logical_vector","title":"Check if an object is a logical vector — is_logical_vector","text":"Check object logical vector","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_logical_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a logical vector — is_logical_vector","text":"","code":"is_logical_vector(x, include_lists = FALSE)"},{"path":"https://selkamand.github.io/assertions/reference/is_logical_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a logical vector — is_logical_vector","text":"x object check. include_lists logical value indicating whether include lists check. Defaults FALSE.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_logical_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a logical vector — is_logical_vector","text":"logical value indicating whether x logical vector.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a single number — is_number","title":"Check if an object is a single number — is_number","text":"Check object single number","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a single number — is_number","text":"","code":"is_number(x)"},{"path":"https://selkamand.github.io/assertions/reference/is_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a single number — is_number","text":"x object check.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a single number — is_number","text":"logical value indicating whether x single number.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is a number — is_number_advanced","title":"Check if x is a number — is_number_advanced","text":"function designed use assert_create_advanced. must return TRUE assertion pass string representing error message assertion fail.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is a number — is_number_advanced","text":"","code":"is_number_advanced(x)"},{"path":"https://selkamand.github.io/assertions/reference/is_number_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is a number — is_number_advanced","text":"x value checked","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_number_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if x is a number — is_number_advanced","text":"Returns invisible(TRUE) x numeric value length 1. Returns string error message x numeric value length 1.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_numeric_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a numeric vector — is_numeric_vector","title":"Check if an object is a numeric vector — is_numeric_vector","text":"function checks object numeric vector R. can also optionally check lists containing numeric elements considered numeric vectors.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_numeric_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a numeric vector — is_numeric_vector","text":"","code":"is_numeric_vector(x, include_lists = FALSE)"},{"path":"https://selkamand.github.io/assertions/reference/is_numeric_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a numeric vector — is_numeric_vector","text":"x object check. include_lists logical value indicating whether lists containing numeric elements considered numeric vectors.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_numeric_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a numeric vector — is_numeric_vector","text":"logical value indicating whether x numeric vector.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_numeric_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a numeric vector — is_numeric_vector","text":"","code":"is_numeric_vector(c(1, 2, 3)) # TRUE #> [1] TRUE is_numeric_vector(list(1, 2, 3)) # FALSE #> [1] FALSE is_numeric_vector(list(1, 2, 3), include_lists = TRUE) # TRUE #> [1] FALSE is_numeric_vector(1:5) # TRUE #> [1] TRUE is_numeric_vector(\"hello\") # FALSE #> [1] FALSE is_numeric_vector(list(1, 2, \"a\"), include_lists = TRUE) # FALSE #> [1] FALSE"},{"path":"https://selkamand.github.io/assertions/reference/is_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a single string — is_string","title":"Check if an object is a single string — is_string","text":"Check object single string","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a single string — is_string","text":"","code":"is_string(x)"},{"path":"https://selkamand.github.io/assertions/reference/is_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a single string — is_string","text":"x object check.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a single string — is_string","text":"logical value indicating whether x single string.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_string_advanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is a string — is_string_advanced","title":"Check if x is a string — is_string_advanced","text":"function designed use assert_create_advanced. must return TRUE assertion pass string representing error message assertion fail.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_string_advanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is a string — is_string_advanced","text":"","code":"is_string_advanced(x)"},{"path":"https://selkamand.github.io/assertions/reference/is_string_advanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is a string — is_string_advanced","text":"x value checked","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_string_advanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if x is a string — is_string_advanced","text":"Returns invisible(TRUE) x character value length 1. Returns string error message x character value length 1.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a vector, optionally excluding lists — is_vector","title":"Check if an object is a vector, optionally excluding lists — is_vector","text":"function checks object vector, option exclude lists considered vectors.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a vector, optionally excluding lists — is_vector","text":"","code":"is_vector(x, include_lists = FALSE)"},{"path":"https://selkamand.github.io/assertions/reference/is_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a vector, optionally excluding lists — is_vector","text":"x object check include_lists logical indicating whether lists considered vectors. Default FALSE.","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a vector, optionally excluding lists — is_vector","text":"logical indicating whether x vector (optionally excluding lists)","code":""},{"path":"https://selkamand.github.io/assertions/reference/is_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a vector, optionally excluding lists — is_vector","text":"","code":"is_vector(1:10) #> [1] TRUE is_vector(list(1:10)) #> [1] FALSE is_vector(list(1:10), include_lists = TRUE) #> [1] TRUE"}]
